#!/usr/bin/env python3
"""
Playwright-Stealth ÌÖåÏä§Ìä∏ Ïä§ÌÅ¨ÎûòÌçº

Î™©Ï†Å: Ï†úÍ≥µÎêú HTML Íµ¨Ï°∞Î•º Í∏∞Î∞òÏúºÎ°ú Ïä§ÌÅ¨ÎûòÌïë ÏÑ±Í≥µ Ïó¨Î∂Ä ÌÖåÏä§Ìä∏
ÏûëÏÑ±Ïùº: 2025ÎÖÑ 6Ïõî 5Ïùº 10:45 (KST)
"""

import asyncio
import sys
import os
from datetime import datetime
from typing import List, Dict, Optional
from urllib.parse import urljoin

from playwright.async_api import async_playwright, Browser, Page
from playwright_stealth import stealth_async

class StealthTestScraper:
    """Playwright-Stealth ÌÖåÏä§Ìä∏ Ïä§ÌÅ¨ÎûòÌçº"""
    
    def __init__(self):
        self.base_url = 'https://www.fmkorea.com'
        self.browser: Optional[Browser] = None
        self.page: Optional[Page] = None
        self.playwright = None
    
    async def __aenter__(self):
        await self.setup_browser()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await self.close_browser()
    
    async def setup_browser(self):
        """Î∏åÎùºÏö∞Ï†Ä ÏÑ§Ï†ï (Stealth Î™®Îìú Ï†ÅÏö©)"""
        try:
            self.playwright = await async_playwright().start()
            
            # Î∏åÎùºÏö∞Ï†Ä ÏòµÏÖò ÏÑ§Ï†ï (Í∏∞Ï°¥ ÏÑ±Í≥µÌïú Ïä§ÌÅ¨ÎûòÌçºÏôÄ ÎèôÏùº)
            self.browser = await self.playwright.chromium.launch(
                headless=False,  # Ìó§ÎìúÎ¶¨Ïä§ Î™®Îìú Ìï¥Ï†ú
                args=[
                    '--no-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-blink-features=AutomationControlled',
                    '--window-size=1920,1080',
                    '--disable-web-security',
                    '--disable-features=VizDisplayCompositor'
                ]
            )
            
            # ÏÉà ÌéòÏù¥ÏßÄ ÏÉùÏÑ±
            self.page = await self.browser.new_page()
            
            # Stealth Î™®Îìú Ï†ÅÏö©
            await stealth_async(self.page)
            
            # Ï∂îÍ∞Ä ÏÑ§Ï†ï
            await self.page.set_viewport_size({"width": 1920, "height": 1080})
            await self.page.set_extra_http_headers({
                'Accept-Language': 'ko-KR,ko;q=0.9,en;q=0.8',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                'Accept-Encoding': 'gzip, deflate, br',
                'DNT': '1',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1',
            })
            
            print("‚úÖ Stealth Î∏åÎùºÏö∞Ï†Ä ÏÑ§Ï†ï ÏôÑÎ£å")
            
        except Exception as e:
            print(f"‚ùå Î∏åÎùºÏö∞Ï†Ä ÏÑ§Ï†ï Ïã§Ìå®: {e}")
            raise
    
    async def close_browser(self):
        """Î∏åÎùºÏö∞Ï†Ä Ï¢ÖÎ£å"""
        try:
            if self.page:
                await self.page.close()
                self.page = None
                
            if self.browser:
                await self.browser.close()
                self.browser = None
                
            if self.playwright:
                await self.playwright.stop()
                self.playwright = None
                
            print("‚úÖ Î∏åÎùºÏö∞Ï†Ä Ï¢ÖÎ£å ÏôÑÎ£å")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Î∏åÎùºÏö∞Ï†Ä Ï¢ÖÎ£å Ï§ë Ïò§Î•ò: {e}")
    
    async def test_fmkorea_politics_page(self) -> bool:
        """FMÏΩîÎ¶¨ÏïÑ Ï†ïÏπò Í≤åÏãúÌåê ÌÖåÏä§Ìä∏"""
        try:
            url = 'https://www.fmkorea.com/politics'
            print(f"üîç ÌéòÏù¥ÏßÄ Ï†ëÏÜç ÏãúÎèÑ: {url}")
            
            # ÌéòÏù¥ÏßÄ Ïù¥Îèô (ÌÉÄÏûÑÏïÑÏõÉ Ï¶ùÍ∞Ä)
            await self.page.goto(url, wait_until="networkidle", timeout=60000)
            
            # ÌéòÏù¥ÏßÄ Î°úÎìú ÌôïÏù∏
            page_title = await self.page.title()
            print(f"üìÑ ÌéòÏù¥ÏßÄ Ï†úÎ™©: {page_title}")
            
            # Í≤åÏãúÍ∏Ä Î™©Î°ù ÌÖåÏù¥Î∏î ÌôïÏù∏ (Ï†úÍ≥µÎêú HTML Íµ¨Ï°∞ Í∏∞Î∞ò)
            table_selector = 'table.bd_lst.bd_tb_lst.bd_tb'
            table_element = await self.page.query_selector(table_selector)
            
            if not table_element:
                print("‚ùå Í≤åÏãúÍ∏Ä Î™©Î°ù ÌÖåÏù¥Î∏îÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
                return False
            
            print("‚úÖ Í≤åÏãúÍ∏Ä Î™©Î°ù ÌÖåÏù¥Î∏î Î∞úÍ≤¨")
            
            # Í≤åÏãúÍ∏Ä ÌñâÎì§ Ï∂îÏ∂ú (Í≥µÏßÄÏÇ¨Ìï≠ Ï†úÏô∏)
            post_rows = await self.page.query_selector_all('table.bd_lst tbody tr:not(.notice)')
            
            if not post_rows:
                print("‚ùå Í≤åÏãúÍ∏Ä ÌñâÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
                return False
            
            print(f"‚úÖ Í≤åÏãúÍ∏Ä Ìñâ Î∞úÍ≤¨: {len(post_rows)}Í∞ú")
            
            # Ï≤´ Î≤àÏß∏ Í≤åÏãúÍ∏Ä Ï†ïÎ≥¥ Ï∂îÏ∂ú ÌÖåÏä§Ìä∏
            first_post = await self.extract_post_info(post_rows[0])
            
            if first_post:
                print("‚úÖ Í≤åÏãúÍ∏Ä Ï†ïÎ≥¥ Ï∂îÏ∂ú ÏÑ±Í≥µ:")
                print(f"   - Ï†úÎ™©: {first_post.get('title', 'N/A')[:50]}...")
                print(f"   - ÏûëÏÑ±Ïûê: {first_post.get('author', 'N/A')}")
                print(f"   - Ï°∞ÌöåÏàò: {first_post.get('view_count', 0)}")
                print(f"   - Ï∂îÏ≤úÏàò: {first_post.get('up_count', 0)}")
                return True
            else:
                print("‚ùå Í≤åÏãúÍ∏Ä Ï†ïÎ≥¥ Ï∂îÏ∂ú Ïã§Ìå®")
                return False
                
        except Exception as e:
            print(f"‚ùå ÌÖåÏä§Ìä∏ Ïã§Ìå®: {e}")
            return False
    
    async def extract_post_info(self, row_element) -> Optional[Dict]:
        """Í≤åÏãúÍ∏Ä Ï†ïÎ≥¥ Ï∂îÏ∂ú (Ï†úÍ≥µÎêú HTML Íµ¨Ï°∞ Í∏∞Î∞ò)"""
        try:
            post_info = {}
            
            # Ïπ¥ÌÖåÍ≥†Î¶¨ Ï∂îÏ∂ú
            try:
                cate_element = await row_element.query_selector('td.cate a')
                if cate_element:
                    category = await cate_element.inner_text()
                    post_info['category'] = category.strip()
            except:
                post_info['category'] = ''
            
            # Ï†úÎ™© Î∞è URL Ï∂îÏ∂ú
            try:
                title_element = await row_element.query_selector('td.title a')
                if title_element:
                    title = await title_element.inner_text()
                    href = await title_element.get_attribute('href')
                    
                    post_info['title'] = title.strip()
                    
                    # Ï†àÎåÄ URLÎ°ú Î≥ÄÌôò
                    if href:
                        if href.startswith('/'):
                            post_info['url'] = urljoin(self.base_url, href)
                        else:
                            post_info['url'] = href
                        
                        # Í≤åÏãúÍ∏Ä ID Ï∂îÏ∂ú
                        if '/' in href:
                            post_id = href.split('/')[-1]
                            post_info['post_id'] = post_id
                else:
                    return None
            except:
                return None
            
            # ÎåìÍ∏Ä Ïàò Ï∂îÏ∂ú (Ï†úÎ™© ÏòÜÏùò replyNum)
            try:
                reply_element = await row_element.query_selector('td.title a.replyNum')
                if reply_element:
                    reply_text = await reply_element.inner_text()
                    post_info['comment_count'] = int(reply_text) if reply_text.isdigit() else 0
                else:
                    post_info['comment_count'] = 0
            except:
                post_info['comment_count'] = 0
            
            # ÏûëÏÑ±Ïûê Ï∂îÏ∂ú
            try:
                author_element = await row_element.query_selector('td.author a.member_plate')
                if author_element:
                    author = await author_element.inner_text()
                    post_info['author'] = author.strip()
                else:
                    post_info['author'] = ''
            except:
                post_info['author'] = ''
            
            # ÏûëÏÑ±ÏãúÍ∞Ñ Ï∂îÏ∂ú
            try:
                time_element = await row_element.query_selector('td.time')
                if time_element:
                    time_text = await time_element.inner_text()
                    post_info['date'] = time_text.strip()
                else:
                    post_info['date'] = ''
            except:
                post_info['date'] = ''
            
            # Ï°∞ÌöåÏàò Ï∂îÏ∂ú
            try:
                view_elements = await row_element.query_selector_all('td.m_no')
                if len(view_elements) >= 1:
                    view_text = await view_elements[0].inner_text()
                    post_info['view_count'] = int(view_text.strip()) if view_text.strip().isdigit() else 0
                else:
                    post_info['view_count'] = 0
            except:
                post_info['view_count'] = 0
            
            # Ï∂îÏ≤úÏàò Ï∂îÏ∂ú (ÎßàÏßÄÎßâ td.m_no)
            try:
                vote_elements = await row_element.query_selector_all('td.m_no')
                if len(vote_elements) >= 2:
                    vote_text = await vote_elements[-1].inner_text()
                    vote_text = vote_text.strip()
                    
                    # ÎπÑÏ∂îÏ≤úÏàò Ï≤òÎ¶¨ (ÏùåÏàò)
                    if vote_text.startswith('-'):
                        post_info['up_count'] = 0
                        post_info['down_count'] = abs(int(vote_text)) if vote_text[1:].isdigit() else 0
                    elif vote_text.isdigit():
                        post_info['up_count'] = int(vote_text)
                        post_info['down_count'] = 0
                    else:
                        post_info['up_count'] = 0
                        post_info['down_count'] = 0
                else:
                    post_info['up_count'] = 0
                    post_info['down_count'] = 0
            except:
                post_info['up_count'] = 0
                post_info['down_count'] = 0
            
            return post_info
            
        except Exception as e:
            print(f"‚ö†Ô∏è Í≤åÏãúÍ∏Ä Ï†ïÎ≥¥ Ï∂îÏ∂ú Ïã§Ìå®: {e}")
            return None
    
    async def test_ruliweb_politics_page(self) -> bool:
        """Î£®Î¶¨Ïõπ Ï†ïÏπòÏú†Î®∏ Í≤åÏãúÌåê ÌÖåÏä§Ìä∏"""
        try:
            url = 'https://bbs.ruliweb.com/community/board/300148'
            print(f"üîç Î£®Î¶¨Ïõπ ÌéòÏù¥ÏßÄ Ï†ëÏÜç ÏãúÎèÑ: {url}")
            
            # ÌéòÏù¥ÏßÄ Ïù¥Îèô (ÌÉÄÏûÑÏïÑÏõÉ Ï¶ùÍ∞Ä)
            await self.page.goto(url, wait_until="networkidle", timeout=60000)
            
            # ÌéòÏù¥ÏßÄ Î°úÎìú ÌôïÏù∏
            page_title = await self.page.title()
            print(f"üìÑ ÌéòÏù¥ÏßÄ Ï†úÎ™©: {page_title}")
            
            # Í≤åÏãúÍ∏Ä Î™©Î°ù ÌÖåÏù¥Î∏î ÌôïÏù∏
            table_selector = '.board_list_table'
            table_element = await self.page.query_selector(table_selector)
            
            if not table_element:
                print("‚ùå Î£®Î¶¨Ïõπ Í≤åÏãúÍ∏Ä Î™©Î°ù ÌÖåÏù¥Î∏îÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
                return False
            
            print("‚úÖ Î£®Î¶¨Ïõπ Í≤åÏãúÍ∏Ä Î™©Î°ù ÌÖåÏù¥Î∏î Î∞úÍ≤¨")
            
            # Í≤åÏãúÍ∏Ä ÌñâÎì§ Ï∂îÏ∂ú
            post_rows = await self.page.query_selector_all('.board_list_table tbody tr.table_body:not(.notice)')
            
            if not post_rows:
                print("‚ùå Î£®Î¶¨Ïõπ Í≤åÏãúÍ∏Ä ÌñâÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
                return False
            
            print(f"‚úÖ Î£®Î¶¨Ïõπ Í≤åÏãúÍ∏Ä Ìñâ Î∞úÍ≤¨: {len(post_rows)}Í∞ú")
            return True
                
        except Exception as e:
            print(f"‚ùå Î£®Î¶¨Ïõπ ÌÖåÏä§Ìä∏ Ïã§Ìå®: {e}")
            return False

async def main():
    """Î©îÏù∏ ÌÖåÏä§Ìä∏ Ìï®Ïàò"""
    print('üöÄ Playwright-Stealth ÌÖåÏä§Ìä∏ ÏãúÏûë')
    print(f'‚è∞ ÏãúÏûë ÏãúÍ∞Ñ: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}')
    print()
    
    async with StealthTestScraper() as scraper:
        # FMÏΩîÎ¶¨ÏïÑ ÌÖåÏä§Ìä∏
        print('üß™ FMÏΩîÎ¶¨ÏïÑ Ï†ïÏπò Í≤åÏãúÌåê ÌÖåÏä§Ìä∏')
        print('=' * 50)
        fmkorea_success = await scraper.test_fmkorea_politics_page()
        print()
        
        # Î£®Î¶¨Ïõπ ÌÖåÏä§Ìä∏
        print('üß™ Î£®Î¶¨Ïõπ Ï†ïÏπòÏú†Î®∏ Í≤åÏãúÌåê ÌÖåÏä§Ìä∏')
        print('=' * 50)
        ruliweb_success = await scraper.test_ruliweb_politics_page()
        print()
        
        # Í≤∞Í≥º ÏöîÏïΩ
        print('üìä ÌÖåÏä§Ìä∏ Í≤∞Í≥º ÏöîÏïΩ')
        print('=' * 50)
        print(f'FMÏΩîÎ¶¨ÏïÑ Stealth ÌÖåÏä§Ìä∏: {"‚úÖ ÏÑ±Í≥µ" if fmkorea_success else "‚ùå Ïã§Ìå®"}')
        print(f'Î£®Î¶¨Ïõπ Stealth ÌÖåÏä§Ìä∏: {"‚úÖ ÏÑ±Í≥µ" if ruliweb_success else "‚ùå Ïã§Ìå®"}')
        
        if fmkorea_success or ruliweb_success:
            print()
            print('üîç ÏÑ±Í≥µÌïú ÏÑ§Ï†ï Î∂ÑÏÑù')
            print('=' * 50)
            print('ÏÑ±Í≥µ ÏöîÏù∏:')
            print('  - playwright-stealth Ï†ÅÏö©')
            print('  - Ìó§ÎìúÎ¶¨Ïä§ Î™®Îìú Ìï¥Ï†ú (headless=False)')
            print('  - Ï∂îÍ∞Ä Î∏åÎùºÏö∞Ï†Ä Ïù∏Ïàò ÏÑ§Ï†ï')
            print('  - ÏÉÅÏÑ∏Ìïú HTTP Ìó§Îçî ÏÑ§Ï†ï')
            print('  - ÌÉÄÏûÑÏïÑÏõÉ Ï¶ùÍ∞Ä (60Ï¥à)')
            print('  - Ï†úÍ≥µÎêú HTML Íµ¨Ï°∞ Í∏∞Î∞ò ÏÖÄÎ†âÌÑ∞ ÏÇ¨Ïö©')
            
            return fmkorea_success, ruliweb_success
        else:
            print('‚ùå Î™®Îì† ÌÖåÏä§Ìä∏ Ïã§Ìå®')
            return False, False
    
    print()
    print(f'‚è∞ ÏôÑÎ£å ÏãúÍ∞Ñ: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}')

if __name__ == "__main__":
    asyncio.run(main()) 